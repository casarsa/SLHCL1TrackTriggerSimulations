import unittest
import sys
from ROOT import TFile, TTree, gROOT, gSystem, vector


class TestAMSim(unittest.TestCase):
    """Test the pattern bank generated by PatternGenerator"""

    infile = "patternBank.root"

    def setUp(self):
        gROOT.SetBatch(True)
        gROOT.SetMacroPath(gSystem.Getenv("CMSSW_BASE")+"/src/SLHCL1TrackTriggerSimulations/AMSimulation")
        gROOT.LoadMacro("python/test/loader.h+")
        self.tfile = TFile.Open(self.infile)
        self.ttree = self.tfile.Get("patternBank")
        self.nevents = self.ttree.GetEntries()

    def tearDown(self):
        pass

    def test_nevents(self):
        self.assertEqual(self.nevents, 61)  # 1 event has zero stub

    def test_superstripIds(self):
        tree = self.ttree
        for ievt in tree:
            for ssId in ievt.superstripIds:
                self.assertNotEqual(ssId, 0)

            self.assertTrue(ievt.superstripIds.size() == 6)

    def test_superstripBits(self):
        tree = self.ttree
        for ievt in tree:
            for ssBit in ievt.superstripBits:
                self.assertEqual(ssBit, 1)

            self.assertTrue(ievt.superstripBits.size() == 6)

    def test_frequency(self):
        tree = self.ttree
        for ievt in tree:
            self.assertEqual(ord(ievt.frequency), 1)


if __name__ == "__main__":
    if len(sys.argv) > 1:
        TestAMSim.infile = sys.argv.pop()

    unittest.main()
